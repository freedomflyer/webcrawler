#include <iostream>
#include "WebCrawler.h"
#include "Word.h"
#include "WordList.h"
#include "Page.h"
#include "UnitTest.h"
using namespace std;

//This method is the main driver behind the WebCrawler, and takes
//<start-url> <output-file> <stopword-file>
int main(int argc, char *argv[])
{
	/*BST<Word> * words = new BST<Word>();

	Word w1 ("hello");
	Word *w2 = new Word("hello1");
	Word *w3 = new Word("hello2");
	Word *w4 = new Word("hello3");
	Word *w5 = new Word("hello4");
	Word *w6 = new Word("hello5");

	words->Insert(w1);
	words->Insert(*w2);
	words->Insert(*w3);
	words->Insert(*w4);
	words->Insert(*w5);
	words->Insert(*w6);

	delete words;
	delete w2;
	delete w3;
	delete w4;
	delete w5;
	delete w6;*/

	BST<Page> * PageHistory = new BST<Page>();

	PageHistory->Insert(Page(URL("hello")));
	PageHistory->Insert(Page(URL("asdf")));
	PageHistory->Insert(Page(URL("heasdfllo")));
	PageHistory->Insert(Page(URL("headfsdfllo")));
	PageHistory->Insert(Page(URL("hefffllo")));

	cout << PageHistory->GetSize() << endl;
	LinkedList<Page> * pages= PageHistory->GetList();

	cout << pages->GetSize() << endl;
	while(pages->GetSize() > 0)
	{
		LLNode<Page> * tempNode = pages->GetFirst();
		cout << "<page>" << endl;
		cout << "<url>";
		cout << tempNode->GetValueNonConst().getURL().getURL();
		cout << "</url>" << endl;
		cout << "</page>" << endl;;
		pages->Remove(tempNode);
	}

	cout << pages->GetSize() << endl;

	delete pages;

	delete PageHistory;


	/*if(argc == 4)
	{
		WebCrawler Crawler(argv[1]);
		Crawler.crawl();
		Crawler.printOutput(argv[2], argv[3]);
	}
	else
		cout << "USAGE: <start-url> <output-file> <stopword-file>" << endl;*/

	return 0;
}
