#ifndef HTMLPARSER_H_
#define HTMLPARSER_H_

#include <string>
#include <iostream>
#include <sstream>

#include "WordList.h"
#include "UnitTest.h"
#include "LinkedList.h"
#include "HTMLTokenizer.h"
#include "Word.h"
#include "URL.h"
#include "Page.h"
#include "URLQueue.h"
#include <ctype.h>
#include "boost/regex.hpp"
#include "StringUtil.h"
#include <boost/algorithm/string/predicate.hpp>
#include "StringURLResolver.h"
#include "CS240Exception.h"


using namespace std;

//This class Parses all HTML of a document
class HTMLParser
{
	public:
		//Constructor which accepts the page to be downloaded and parsed
		HTMLParser(WordList &_WordList, URLQueue & _PQ);

		Page * Parse(URL urlToParse);

		//Parse the downloaded page and look specifically for words appearing between tags
		//to add to the WordIndex
		LinkedList<Word> ParseForWords();

		//Parse the downloaded page and look specifically for A Tags
		//and then get the attribute from href="xxx". xxx is the link
		LinkedList<URL> ParseForLinks();

		//Parse the given page and find the description of the page to return.
		string ParseForDescription();

		void processBlockOfText(string _text, Page * pageToReturn);

		void cleanAndAddText(string _text);

		static bool Test(ostream &os);
		void BuildPossibleDescription(string _text);

	private:
		URL urlToParse;
		WordList & MasterWordList;
		URLQueue MasterURLQueue;

		//Parser Flags
		bool inHTML;
		bool inHead;
		bool inBody;
		bool inTitle;
		bool inH;
		bool inScript;
		bool inA;

		//Title of the page to be added.
		string title;
		string possibleDescription;
};

#endif /* HTMLPARSER_H_ */
